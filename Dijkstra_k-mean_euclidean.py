# Loading the required modules

import psycopg2

from DB_connection_parameters import user, password, host, port, database3
import numpy as np

from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from kmean import kmeans

try:
    connection = psycopg2.connect(user=user, password=password, host=host, port=port, database=database3)
    cursor = connection.cursor()

    # ile punktów
    n = 3

    cursor.execute(
        f'SELECT id, geom, ST_AsText(ST_PointN(geom,1)), ST_AsText(geom) FROM public."500m_g" where id in (1330304, 4802327, 1430412, 4747224, 2430236, 1250323, 1520984, 764678, 1018929, 1382920, 289954, 2337235, 627569, 1249795, 4725844, 1810691, 805463, 1419216, 877282, 1112898, 2289451, 1857488, 280363, 286176, 2052348, 4630445, 1810661, 629570, 928357, 1383820, 1521302, 1600495, 1338729, 614495, 1810693, 805404, 282444, 4795348, 1069210, 2246751, 1472045, 295622, 1390117, 1660990, 2337313, 2096112, 4802384, 4666237, 4755778, 1120552, 4785518, 2195727, 1763193, 634963, 631515, 1606844, 1068188, 1703700, 4665436, 1160809, 295123, 764674, 1858012, 1159705, 1294036, 806137, 288816, 577032, 1160216, 293037, 292515, 1471506, 1603123, 2016570, 1430418, 1606346, 1332904, 1337346, 4666723, 1297472, 556360, 4785585, 1660410, 1337345, 4795329, 4666360, 4666032, 821529, 4635887, 1710060, 646224, 1471510, 4977836, 1249793, 764675, 1205049, 1206402, 631555, 928630, 1810657, 4743118, 4756569, 1068482, 4663212, 4756075, 1294013, 2052345, 1159555, 1332906, 1609932, 632226, 1709346, 1743375, 300842, 972731, 1294420, 2289405, 645725, 1383602, 1382924, 2147335, 970317, 1612374, 1205689, 1858313, 1433382, 1590971, 1384976, 1598806, 1520497, 1251369, 764955, 1519425, 1858303, 2337317, 1600491, 809687, 813187, 1709843, 1609927, 1284232, 970064, 1204772, 289932, 1068270, 4756145, 576420, 292513, 1598663, 4666722, 1426569, 809011, 4666637, 627304, 1810663, 1161170, 284165, 2337609, 1120553, 1430595, 1250208, 1068190, 281410, 1612373, 902280, 971595, 1810666, 1067212, 1709952, 1251345, 2016089, 1612189, 556362, 876343, 627304, 1109765, 631557, 299665, 709296, 1419696, 805466, 1338541, 1609348, 1703485, 614538, 764683, 1599179, 1120607, 765170, 809689, 2289200, 614884, 2052048, 1609936, 1109762, 4756235, 1250074, 577034, 4749049, 969353, 1858192, 1068965, 1921955, 4660007, 4743168, 282435, 765172, 1590972, 1250085, 1068939, 902276, 928729, 1420338, 1810493, 1069238, 817802, 2051682, 1160213, 812757, 2195677, 4756546, 289947, 1284297, 1332924, 822632, 4756213, 282435, 1291176, 2016824, 1918572, 4974774, 968897, 970710, 4968814, 1383348, 1519388, 2196012, 4810816, 2148174, 764678, 295621, 1660410, 972974, 1426422, 902808, 1205049, 4646886, 1430417, 1105566, 1250206, 1250197, 281406, 1019095, 1710060, 1471720, 4807075, 4769490, 296216, 1382261, 1520486, 1250325, 1426835, 2088777, 1206356, 1612183, 4817006, 1206358, 1606445, 1519145, 764678, 4743118, 1120606, 1603580, 1338728, 1159787, 1383618, 805064, 1900206, 1109726, 4971850, 805406, 1382895, 299371, 628723, 1105641, 1019669, 4966477, 4725845, 2374500, 1337341, 2430233, 1068437, 2016822, 287238, 614823, 971124, 824881, 928628, 631856, 1205230, 1433196, 1332906, 1609926, 1068437, 1606496, 1332926, 653841, 1250912, 4745693, 4756145, 652726, 1423786, 1598742, 282434, 4971851, 2148169, 289952, 1600218, 1206244, 810219, 2051673, 2016572, 1120551, 812757, 902542, 1599975, 1383820, 4782025, 764675, 637362, 630927, 1068414, 293039, 2147334, 1105513, 1019574, 1427385, 646224, 4663584, 4663211, 635652, 1205604, 4769609, 1751809, 1660700, 647237, 280821, 1383110, 630929, 4756213, 1705160, 1294026, 1204933, 1205485, 1382259, 1600141, 1606839, 631515, 282434, 1609933, 1159700, 2195565, 282433, 4170605, 1334457, 877404, 1743560, 4794102, 1068567, 1810660, 1068940, 636901, 1419217, 299366, 1382919, 970065, 765169, 4653271, 199745, 971124, 876463, 1337348, 1660699, 287728, 1471320, 298097, 1419217, 4977836, 970181, 295117, 809485, 1612374, 1068792, 4666723, 1743570, 2195795, 1520144, 1660991, 1068558, 4630478, 615043, 614543, 1395026, 1519148, 1338542, 4743198, 4782062, 902812, 1520899, 1383795, 764949, 1332908, 1205049, 627313, 1338543, 614889, 806139, 1384976, 1205048, 825322, 1743570, 1159436, 4743201, 1250045, 1105643, 1704498, 300840, 4769862, 4980293, 1160603, 1067107, 876654, 1204932, 1600218, 631517, 1709952, 1019008, 970180, 1160807, 636898, 813304, 1250348, 1609347, 282440, 1068438, 817292, 1383107, 1423648, 1337519, 2016084, 876467, 4666360, 1426943, 1973333, 636901, 1419273, 970180, 1160212, 765610, 279759, 2052053, 813303, 1743572, 289931, 1068566, 4963498, 1710057, 970341, 808811, 1973700, 4170612, 1337916, 805064, 4755889, 1284361, 4974797, 615044, 1383607, 631907, 928634, 1430415, 1609352, 4665984, 820519, 1385453, 1471511, 1161105, 1250322, 576430, 4743198, 1660246, 805800, 1383616, 1520898, 1112730, 4966477, 1924598, 4807100, 1429865, 1205046)'
        # f'SELECT id,the_geom AS geom, ST_AsText(the_geom) AS geomDD FROM public."lineEdges_noded_vertices_pgr" ORDER BY random() limit {n}'
        # f'SELECT id, geom, ST_AsText(ST_PointN(geom,1)), ST_AsText(geom) FROM public."500m_g" ORDER BY random() limit {n}'
    )

    dane = cursor.fetchall()
    print('\n sórówka z bazy danych \n', dane)

    # rozpakowuje dane
    x = [item[0] for item in dane]  # indeksy punktów
    coords = [(item[1]) for item in dane]  # współrzedne punktów
    coordsDD = [(item[2]) for item in dane]  # współrzedne punktów
    coordsDX = [[float(item[7:-1].split()[0]), float(item[7:-1].split()[1])] for item in coordsDD]
    coordsY = [float(item[6:-1].split()[0]) for item in coordsDD]
    coordsX = [float(item[7:-1].split()[1]) for item in coordsDD]
    print('Lista współrzędnych', coordsX, '\n', coordsY)
    tablica_dane = np.column_stack([coordsX, coordsY], )

    print('>>>>>>>>>>>>>>>>>>>>> to jest tablica na dane', tablica_dane)
    pca = PCA(2)
    df = pca.fit_transform(tablica_dane)
    print('>>>>>>>>>>>>>>>>>>>>> df\n', df)
    label = kmeans(tablica_dane, 5, 500)
    print('label ===================\n', label)

    u_labels = np.unique(label)
    for i in u_labels:
        plt.scatter(tablica_dane[label == i, 1], tablica_dane[label == i, 0], label=i)
    plt.legend()
    plt.grid
    plt.show()

    print('askjdfhkajsdfhkalsjfdhkaljsdh ', df)


except(Exception, psycopg2.Error) as error:
    print("Próba połączenia zakończona niepowodzeniem", error)
finally:
    # zamkniecie nawiazanego połączenia.
    if (connection):
        cursor.close()
        connection.close()
        print("Zakończono połączenie")
